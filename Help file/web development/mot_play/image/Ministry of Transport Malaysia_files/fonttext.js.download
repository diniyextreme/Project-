
var min=11;
var max=25;
var font = document.getElementsByTagName('font');
var span = document.getElementsByTagName('span');
var link = document.getElementsByTagName('a');
var table = document.getElementsByTagName('table');
var paragraph = document.getElementsByTagName('p');
var div = document.getElementsByTagName('div');
var h3 = document.getElementsByTagName('h3');
var h5 = document.getElementsByTagName('h5');
var h4 = document.getElementsByTagName('h4');
var h2 = document.getElementsByTagName('h2');
var h1 = document.getElementsByTagName('h1');
/*var colorId=Get_Cookie('color');*/
var fSize=Get_Cookie('fSize_span');
/*if ( Get_Cookie( 'color' ) ) fontColor(colorId);*/
if ( Get_Cookie( 'fSize_span' ) ) getFontSize(fSize);
function getFontSize(fSize){
	for(i=0;i<font.length;i++) {
	font[i].style.fontSize = fSize;
	}
	for(i=0;i<span.length;i++) {
	span[i].style.fontSize = fSize;
	Set_Cookie( 'fSize_span', fSize, '', '/', '', '' );
	}
	for(i=0;i<link.length;i++) {
	link[i].style.fontSize = fSize;
	}
	for(i=0;i<table.length;i++) {
	table[i].style.fontSize = fSize;
	}
	for(i=0;i<paragraph.length;i++) {
	paragraph[i].style.fontSize = fSize;
	}
	for(i=0;i<div.length;i++) {
	div[i].style.fontSize = fSize;
	}
	for(i=0;i<h3.length;i++) {
	h3[i].style.fontSize = fSize;
	}
	for(i=0;i<h4.length;i++) {
	h4[i].style.fontSize = fSize;
	}
	for(i=0;i<h5.length;i++) {
	h5[i].style.fontSize = fSize;
	}
	for(i=0;i<h2.length;i++) {
	h2[i].style.fontSize = fSize;
	}
	for(i=0;i<h1.length;i++) {
	h1[i].style.fontSize = fSize;
	}
	
}

function resetFont() {
getFontSize('')
}
function increaseFontSize() {
	
	
	for(i=0;i<font.length;i++) {
		if(font[i].style.fontSize) 
		{
			var s = 17;
		} 
		else 
		{
			var s = 17;
		}
		if(s==max) {
			s = 17;
		}
		font[i].style.fontSize = s+"px"
	}

	for(i=0;i<span.length;i++) {
		if(span[i].style.fontSize) 
		{
			var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
			s = 17;
		}
		span[i].style.fontSize = s+"px"
		Set_Cookie( 'fSize_span', s+"px", '', '/', '', '' );
	}

	for(i=0;i<link.length;i++) {
	if(link[i].style.fontSize) {
		var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
		s = 17;
		}
		link[i].style.fontSize = s+"px"
		}
		for(i=0;i<table.length;i++) {
		if(table[i].style.fontSize) {
		var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
		s = 17;
		}
		table[i].style.fontSize = s+"px"
		}
		
		for(i=0;i<paragraph.length;i++) {
		if(paragraph[i].style.fontSize) {
		var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
		s = 17;
		}
		paragraph[i].style.fontSize = s+"px"
		}
		
		for(i=0;i<div.length;i++) {
		if(div[i].style.fontSize) {
		var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
		s = 17;
		}
		div[i].style.fontSize = s+"px"
		}
		
		for(i=0;i<h3.length;i++) {
		if(h3[i].style.fontSize) {
		var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
		s = 17;
		}
		h3[i].style.fontSize = s+"px"
		}
		
		
		for(i=0;i<h4.length;i++) {
		if(h4[i].style.fontSize) {
		var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
		s = 17;
		}
		h3[i].style.fontSize = s+"px"
		}
		
		for(i=0;i<h5.length;i++) {
		if(h5[i].style.fontSize) {
		var s = 17;
		} else {
		var s = 17;
		}
		if(s==max) {
		s = 17;
		}
		h3[i].style.fontSize = s+"px"
		}
		}
		
		
function decreaseFontSize() {
for(i=0;i<font.length;i++) {
if(font[i].style.fontSize) {
var s = parseInt(font[i].style.fontSize.replace("px",""));
} else {
var s = 12;
}
if(s==min) {
s = 12;
}
font[i].style.fontSize = s+"px"
}
for(i=0;i<span.length;i++) {
if(span[i].style.fontSize) {
var s = parseInt(span[i].style.fontSize.replace("px",""));
} else {
var s = 12;
}
if(s!=min) {
s = 12;
}
span[i].style.fontSize = s+"px"
Set_Cookie( 'fSize_span', s+"px", '', '/', '', '' );
}
for(i=0;i<link.length;i++) {
if(link[i].style.fontSize) {
var s = parseInt(link[i].style.fontSize.replace("px",""));
} else {
var s = 12;
}
if(s!=min) {
s = 12;
}
link[i].style.fontSize = s+"px"
}
for(i=0;i<table.length;i++) {
if(table[i].style.fontSize) {
var s = parseInt(table[i].style.fontSize.replace("px",""));
} else {
var s = 12;
}
if(s!=min) {
s = 12;
}
table[i].style.fontSize = s+"px"
}
for(i=0;i<paragraph.length;i++) {
if(paragraph[i].style.fontSize) {
var s = parseInt(paragraph[i].style.fontSize.replace("px",""));
} else {
var s = 12;
}
if(s!=min) {
s = 12;
}
paragraph[i].style.fontSize = s+"px"
}

for(i=0;i<div.length;i++) {
if(div[i].style.fontSize) {
var s = parseInt(div[i].style.fontSize.replace("px",""));
} else {
var s = 12;
}
if(s!=min) {
s = 12;
}
div[i].style.fontSize = s+"px"
}
for(i=0;i<h3.length;i++) {
if(h3[i].style.fontSize) {
var s = parseInt(h3[i].style.fontSize.replace("px",""));
} else {
var s = 12;
}
if(s!=min) {
s = 12;
}
h3[i].style.fontSize = s+"px"
}
}

function Set_Cookie( name, value, expires, path, domain, secure )
{
// set time, it's in milliseconds
var today = new Date();
today.setTime( today.getTime() );
/*
if the expires variable is set, make the correct
expires time, the current script below will set
it for x number of days, to make it for hours,
delete * 24, for minutes, delete * 60 * 24
*/
if ( expires )
{
expires = expires * 1000 * 60 * 60 * 24;
}
var expires_date = new Date( today.getTime() + (expires) );
document.cookie = name + "=" +escape( value ) +
( ( expires ) ? ";expires=" + expires_date.toGMTString() : "" ) +
( ( path ) ? ";path=" + path : "" ) +
( ( domain ) ? ";domain=" + domain : "" ) +
( ( secure ) ? ";secure" : "" );
}
// this fixes an issue with the old method, ambiguous values
// with this test document.cookie.indexOf( name + "=" );
function Get_Cookie( check_name ) {
// first we'll split this cookie up into name/value pairs
// note: document.cookie only returns name=value, not the other components
var a_all_cookies = document.cookie.split( ';' );
var a_temp_cookie = '';
var cookie_name = '';
var cookie_value = '';
var b_cookie_found = false; // set boolean t/f default f
for ( i = 0; i < a_all_cookies.length; i++ )
{
// now we'll split apart each name=value pair
a_temp_cookie = a_all_cookies[i].split( '=' );
// and trim left/right whitespace while we're at it
cookie_name = a_temp_cookie[0].replace(/^\s+|\s+$/g, '');
// if the extracted name matches passed check_name
if ( cookie_name == check_name )
{
b_cookie_found = true;
// we need to handle case where cookie has no value but exists (no = sign, that is):
if ( a_temp_cookie.length > 1 )
{
cookie_value = unescape( a_temp_cookie[1].replace(/^\s+|\s+$/g, '') );
}
// note that in cases where cookie is initialized but no value, null is returned
return cookie_value;
break;
}
a_temp_cookie = null;
cookie_name = '';
}
if ( !b_cookie_found )
{
return null;
}
}
// this deletes the cookie when called
function Delete_Cookie( name, path, domain ) {
if ( Get_Cookie( name ) ) document.cookie = name + "=" +
( ( path ) ? ";path=" + path : "") +
( ( domain ) ? ";domain=" + domain : "" ) +
";expires=Thu, 01-Jan-1970 00:00:01 GMT";
}
